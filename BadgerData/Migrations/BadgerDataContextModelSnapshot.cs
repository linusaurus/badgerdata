// <auto-generated />
using System;
using BadgerData.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BadgerData.Migrations
{
    [DbContext(typeof(BadgerDataContext))]
    partial class BadgerDataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("BadgerData.Models.AccountType", b =>
                {
                    b.Property<int>("AccountTypeID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccountTypeName");

                    b.HasKey("AccountTypeID");

                    b.ToTable("AccountType");
                });

            modelBuilder.Entity("BadgerData.Models.Attachment", b =>
                {
                    b.Property<int>("AttachmentID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AttachmentDescription");

                    b.Property<string>("Ext");

                    b.Property<int>("PurchaseOrderID");

                    b.Property<string>("src");

                    b.HasKey("AttachmentID");

                    b.HasIndex("PurchaseOrderID");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("BadgerData.Models.Category", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CategoryName");

                    b.Property<int?>("PartClassID");

                    b.HasKey("CategoryID");

                    b.HasIndex("PartClassID");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("BadgerData.Models.Claim", b =>
                {
                    b.Property<int>("ClaimID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("ClaimDate");

                    b.Property<int?>("EmployeeID");

                    b.Property<int?>("PurchaseOrderID");

                    b.Property<string>("SupplierOrder");

                    b.HasKey("ClaimID");

                    b.ToTable("Claim");
                });

            modelBuilder.Entity("BadgerData.Models.ClaimDocument", b =>
                {
                    b.Property<int?>("ClaimDocumentID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ClaimItemID");

                    b.Property<string>("DocumentDescription");

                    b.Property<string>("DocumentExtension");

                    b.HasKey("ClaimDocumentID");

                    b.HasIndex("ClaimItemID");

                    b.ToTable("ClaimDocument");
                });

            modelBuilder.Entity("BadgerData.Models.ClaimItem", b =>
                {
                    b.Property<int>("ClaimItemID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Bcode");

                    b.Property<int?>("ClaimID")
                        .IsRequired();

                    b.Property<string>("DefectDescription");

                    b.Property<string>("Description");

                    b.Property<int?>("LineID");

                    b.Property<int?>("PartID");

                    b.Property<int?>("ProductID");

                    b.Property<int?>("TransActionTypeID");

                    b.HasKey("ClaimItemID");

                    b.HasIndex("ClaimID");

                    b.ToTable("ClaimItem");
                });

            modelBuilder.Entity("BadgerData.Models.Customer", b =>
                {
                    b.Property<int>("CustomerID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CustomerName");

                    b.HasKey("CustomerID");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("BadgerData.Models.Document", b =>
                {
                    b.Property<int>("DocumentID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("DocumentPath");

                    b.Property<string>("DocumentView");

                    b.Property<int?>("PartID");

                    b.HasKey("DocumentID");

                    b.ToTable("Document");
                });

            modelBuilder.Entity("BadgerData.Models.DocumentParts", b =>
                {
                    b.Property<int>("DocumentID");

                    b.Property<int>("PartID");

                    b.HasKey("DocumentID", "PartID");

                    b.HasIndex("PartID");

                    b.ToTable("DocumentParts");
                });

            modelBuilder.Entity("BadgerData.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("EmployeeEmail");

                    b.Property<string>("Firstname");

                    b.Property<bool?>("IsPurchaser");

                    b.Property<string>("Lastname");

                    b.Property<string>("Login");

                    b.Property<string>("Middlename");

                    b.Property<string>("Password");

                    b.Property<int?>("Role");

                    b.Property<bool?>("Show");

                    b.HasKey("EmployeeID");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("BadgerData.Models.Finish", b =>
                {
                    b.Property<int>("FinishID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FinishName");

                    b.HasKey("FinishID");

                    b.ToTable("Finish");
                });

            modelBuilder.Entity("BadgerData.Models.Globals", b =>
                {
                    b.Property<int>("GiD")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Data");

                    b.Property<string>("ElementName");

                    b.HasKey("GiD");

                    b.ToTable("Globals");
                });

            modelBuilder.Entity("BadgerData.Models.Inventory", b =>
                {
                    b.Property<int>("StockTransactionID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateStamp");

                    b.Property<string>("Description");

                    b.Property<int?>("JobID");

                    b.Property<int?>("LineID");

                    b.Property<string>("Location");

                    b.Property<string>("Note");

                    b.Property<int?>("OrderReceiptID");

                    b.Property<int?>("PartID");

                    b.Property<int?>("ProductID");

                    b.Property<decimal?>("Qnty");

                    b.Property<int?>("TransActionReference");

                    b.Property<int?>("TransActionType");

                    b.Property<int?>("UnitOfMeasure");

                    b.HasKey("StockTransactionID");

                    b.HasIndex("OrderReceiptID");

                    b.ToTable("Inventory");
                });

            modelBuilder.Entity("BadgerData.Models.Job", b =>
                {
                    b.Property<int>("job_id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool?>("Retired");

                    b.Property<bool?>("Visible");

                    b.Property<string>("jobdesc");

                    b.Property<string>("jobname");

                    b.Property<int?>("jobnumber");

                    b.HasKey("job_id");

                    b.ToTable("Job");
                });

            modelBuilder.Entity("BadgerData.Models.Manu", b =>
                {
                    b.Property<int>("ManuID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ManuCategoryID");

                    b.Property<string>("Manufacturer");

                    b.Property<string>("Phone");

                    b.Property<string>("WebAddress");

                    b.HasKey("ManuID");

                    b.ToTable("Manu");
                });

            modelBuilder.Entity("BadgerData.Models.OrderReceipt", b =>
                {
                    b.Property<int>("OrderReceiptID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("EmployeeID");

                    b.Property<int?>("JobID");

                    b.Property<int?>("PurchaseOrderID");

                    b.Property<DateTime?>("ReceiptDate");

                    b.HasKey("OrderReceiptID");

                    b.ToTable("OrderReceipt");
                });

            modelBuilder.Entity("BadgerData.Models.Part", b =>
                {
                    b.Property<int>("PartID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AddedBy");

                    b.Property<decimal?>("Cost");

                    b.Property<DateTime?>("DateAdded");

                    b.Property<string>("ItemDescription");

                    b.Property<string>("ItemName");

                    b.Property<string>("Location");

                    b.Property<int?>("ManuID");

                    b.Property<string>("ManuPartNum");

                    b.Property<decimal?>("MarkUp");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<bool?>("Obsolute");

                    b.Property<string>("PartNum");

                    b.Property<int?>("PartTypeID");

                    b.Property<string>("SKU");

                    b.Property<string>("SupplierDescription");

                    b.Property<int?>("SupplierID");

                    b.Property<int?>("UnitOfMeasureID");

                    b.Property<bool?>("UseSupplierNameFlag");

                    b.Property<decimal?>("Waste");

                    b.Property<decimal?>("Weight");

                    b.HasKey("PartID");

                    b.HasIndex("PartTypeID");

                    b.HasIndex("SupplierID");

                    b.HasIndex("UnitOfMeasureID");

                    b.ToTable("Part");
                });

            modelBuilder.Entity("BadgerData.Models.PartClass", b =>
                {
                    b.Property<int>("PartClassID")
                        .ValueGeneratedOnAdd();

                    b.HasKey("PartClassID");

                    b.ToTable("PartClass");
                });

            modelBuilder.Entity("BadgerData.Models.PartType", b =>
                {
                    b.Property<int>("PartTypeID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("Categoryid");

                    b.HasKey("PartTypeID");

                    b.HasIndex("Categoryid");

                    b.ToTable("PartType");
                });

            modelBuilder.Entity("BadgerData.Models.Product", b =>
                {
                    b.Property<int>("ProductID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ArchRef");

                    b.Property<decimal?>("Depth");

                    b.Property<decimal?>("Height");

                    b.Property<string>("Note");

                    b.Property<bool>("Omit");

                    b.Property<string>("ProductName");

                    b.Property<DateTime?>("ProductionDate");

                    b.Property<int?>("ProjectID");

                    b.Property<decimal?>("Width");

                    b.HasKey("ProductID");

                    b.HasIndex("ProjectID");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("BadgerData.Models.Project", b =>
                {
                    b.Property<int>("ProjectID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool?>("Active");

                    b.Property<DateTime?>("Created");

                    b.Property<bool?>("IsContracted");

                    b.Property<int?>("JobID");

                    b.Property<string>("ProjectName");

                    b.HasKey("ProjectID");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("BadgerData.Models.PurchaseLineItem", b =>
                {
                    b.Property<int>("LineID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BCode");

                    b.Property<string>("Description");

                    b.Property<decimal?>("Extended");

                    b.Property<int?>("JobID");

                    b.Property<decimal?>("Length");

                    b.Property<string>("Note");

                    b.Property<int?>("PartID");

                    b.Property<int>("PurchaseOrderID");

                    b.Property<decimal?>("Qnty");

                    b.Property<bool?>("Received");

                    b.Property<int?>("RequisitionID");

                    b.Property<string>("SupplierPartName");

                    b.Property<decimal?>("Thick");

                    b.Property<decimal?>("UnitCost");

                    b.Property<int?>("UnitOfMeasureID");

                    b.Property<decimal?>("Weight");

                    b.Property<decimal?>("Width");

                    b.HasKey("LineID");

                    b.HasIndex("PurchaseOrderID");

                    b.ToTable("PurchaseLineItem");
                });

            modelBuilder.Entity("BadgerData.Models.PurchaseOrder", b =>
                {
                    b.Property<int>("PurchaseOrderID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("EmployeeID");

                    b.Property<DateTime?>("Expected_Date");

                    b.Property<int?>("Job_id");

                    b.Property<string>("Memo");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<DateTime?>("OrderDate");

                    b.Property<string>("OrderFormat");

                    b.Property<decimal?>("OrderTotal");

                    b.Property<bool?>("Received");

                    b.Property<DateTime?>("ReceivedDate");

                    b.Property<string>("SalesRep");

                    b.Property<int?>("ShipID");

                    b.Property<decimal?>("Shipping");

                    b.Property<decimal?>("SubTotal");

                    b.Property<int?>("SupplierID");

                    b.Property<decimal?>("Tax");

                    b.Property<bool?>("Taxable");

                    b.HasKey("PurchaseOrderID");

                    b.HasIndex("EmployeeID");

                    b.HasIndex("Job_id");

                    b.HasIndex("SupplierID");

                    b.ToTable("PurchaseOrder");
                });

            modelBuilder.Entity("BadgerData.Models.Requisition", b =>
                {
                    b.Property<int>("RequisitionID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("EmployeeID");

                    b.Property<int?>("JobID");

                    b.Property<DateTime?>("RequisitionDate");

                    b.Property<DateTime?>("RequisitionSubmittedDate");

                    b.Property<decimal?>("RequisitionTotal");

                    b.Property<bool?>("Submitted");

                    b.HasKey("RequisitionID");

                    b.ToTable("Requisition");
                });

            modelBuilder.Entity("BadgerData.Models.RequisitionItem", b =>
                {
                    b.Property<int>("RequisitionItemID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<int?>("LineItemSourceID");

                    b.Property<int?>("PartID");

                    b.Property<decimal?>("Qnty");

                    b.Property<int?>("RequisitionID");

                    b.Property<int?>("RequisitionlD");

                    b.HasKey("RequisitionItemID");

                    b.HasIndex("RequisitionID");

                    b.ToTable("RequisitionItem");
                });

            modelBuilder.Entity("BadgerData.Models.ShipBy", b =>
                {
                    b.Property<int>("ShipID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ShipByName");

                    b.HasKey("ShipID");

                    b.ToTable("ShipBy");
                });

            modelBuilder.Entity("BadgerData.Models.SubAssembly", b =>
                {
                    b.Property<int>("SubAssemblyID")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("D");

                    b.Property<decimal>("H");

                    b.Property<string>("MakeFile");

                    b.Property<int>("ProductID");

                    b.Property<string>("SubAssemblyName");

                    b.Property<decimal>("W");

                    b.HasKey("SubAssemblyID");

                    b.ToTable("SubAssembly");
                });

            modelBuilder.Entity("BadgerData.Models.Supplier", b =>
                {
                    b.Property<int>("SupplierID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccountNumber");

                    b.Property<int?>("AccountType");

                    b.Property<bool?>("Active");

                    b.Property<string>("Address1");

                    b.Property<string>("Address2");

                    b.Property<int?>("Category");

                    b.Property<string>("City");

                    b.Property<string>("Fax");

                    b.Property<string>("Phone");

                    b.Property<string>("State");

                    b.Property<string>("SupplierName");

                    b.Property<string>("Zip");

                    b.HasKey("SupplierID");

                    b.ToTable("Supplier");
                });

            modelBuilder.Entity("BadgerData.Models.Task", b =>
                {
                    b.Property<int>("TaskID")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal?>("MarkUp");

                    b.Property<decimal?>("Rate");

                    b.Property<string>("TaskDescription");

                    b.Property<string>("TaskName");

                    b.Property<int?>("TaskType");

                    b.Property<int?>("WorkCenter");

                    b.HasKey("TaskID");

                    b.ToTable("Task");
                });

            modelBuilder.Entity("BadgerData.Models.TransActionType", b =>
                {
                    b.Property<int>("TransactionsTypeID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("TransactionTypeName");

                    b.HasKey("TransactionsTypeID");

                    b.ToTable("TransActionType");
                });

            modelBuilder.Entity("BadgerData.Models.UnitOfMeasure", b =>
                {
                    b.Property<int>("UnitOfMeasureID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("UnitOfMeasureName");

                    b.HasKey("UnitOfMeasureID");

                    b.ToTable("UnitOfMeasure");
                });

            modelBuilder.Entity("BadgerData.Models.WorkCenter", b =>
                {
                    b.Property<int>("WorkCenterID")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal?>("Availability");

                    b.Property<decimal?>("CostRate");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("WorkCenterName");

                    b.HasKey("WorkCenterID");

                    b.ToTable("WorkCenter");
                });

            modelBuilder.Entity("BadgerData.Models.WorkOrder", b =>
                {
                    b.Property<int>("WorkOrderID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("EndDate");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int?>("ProductID");

                    b.Property<int?>("ProjectID");

                    b.Property<DateTime?>("StartDate");

                    b.Property<DateTime>("WorkOrderDate");

                    b.HasKey("WorkOrderID");

                    b.ToTable("WorkOrder");
                });

            modelBuilder.Entity("BadgerData.Models.WorkOrderRouting", b =>
                {
                    b.Property<int>("WorkOrderID");

                    b.Property<int>("ProductID");

                    b.Property<int>("OperationSequence");

                    b.Property<decimal?>("ActualCost");

                    b.Property<DateTime?>("ActualEndDate");

                    b.Property<DateTime?>("ActualStartDate");

                    b.Property<int?>("EmployeeID");

                    b.Property<int?>("LocationID");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<decimal?>("PlannedCost");

                    b.Property<DateTime?>("ScheduledEndDate");

                    b.Property<DateTime?>("ScheduledStartDate");

                    b.Property<int?>("TaskID");

                    b.HasKey("WorkOrderID", "ProductID", "OperationSequence");

                    b.ToTable("WorkOrderRouting");
                });

            modelBuilder.Entity("BadgerData.Models.Attachment", b =>
                {
                    b.HasOne("BadgerData.Models.PurchaseOrder", "PurchaseOrder")
                        .WithMany("Attachments")
                        .HasForeignKey("PurchaseOrderID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BadgerData.Models.Category", b =>
                {
                    b.HasOne("BadgerData.Models.PartClass", "PartClass")
                        .WithMany("Categories")
                        .HasForeignKey("PartClassID");
                });

            modelBuilder.Entity("BadgerData.Models.ClaimDocument", b =>
                {
                    b.HasOne("BadgerData.Models.ClaimItem")
                        .WithMany("ClaimDocuments")
                        .HasForeignKey("ClaimItemID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BadgerData.Models.ClaimItem", b =>
                {
                    b.HasOne("BadgerData.Models.Claim")
                        .WithMany("ClaimItems")
                        .HasForeignKey("ClaimID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BadgerData.Models.DocumentParts", b =>
                {
                    b.HasOne("BadgerData.Models.Document")
                        .WithMany("Parts")
                        .HasForeignKey("DocumentID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BadgerData.Models.Part")
                        .WithMany("Documents")
                        .HasForeignKey("PartID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BadgerData.Models.Inventory", b =>
                {
                    b.HasOne("BadgerData.Models.OrderReceipt")
                        .WithMany("Inventory")
                        .HasForeignKey("OrderReceiptID");
                });

            modelBuilder.Entity("BadgerData.Models.Part", b =>
                {
                    b.HasOne("BadgerData.Models.PartType", "PartType")
                        .WithMany("Parts")
                        .HasForeignKey("PartTypeID");

                    b.HasOne("BadgerData.Models.Supplier", "Supplier")
                        .WithMany("Parts")
                        .HasForeignKey("SupplierID");

                    b.HasOne("BadgerData.Models.UnitOfMeasure", "UnitOfMeasure")
                        .WithMany("Parts")
                        .HasForeignKey("UnitOfMeasureID");
                });

            modelBuilder.Entity("BadgerData.Models.PartType", b =>
                {
                    b.HasOne("BadgerData.Models.Category", "Category")
                        .WithMany("PartTypes")
                        .HasForeignKey("Categoryid");
                });

            modelBuilder.Entity("BadgerData.Models.Product", b =>
                {
                    b.HasOne("BadgerData.Models.Project", "Project")
                        .WithMany("Product")
                        .HasForeignKey("ProjectID");
                });

            modelBuilder.Entity("BadgerData.Models.PurchaseLineItem", b =>
                {
                    b.HasOne("BadgerData.Models.PurchaseOrder", "PurchaseOrder")
                        .WithMany("PurchaseLineItems")
                        .HasForeignKey("PurchaseOrderID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BadgerData.Models.PurchaseOrder", b =>
                {
                    b.HasOne("BadgerData.Models.Employee", "Employee")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("EmployeeID");

                    b.HasOne("BadgerData.Models.Job", "Job")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("Job_id");

                    b.HasOne("BadgerData.Models.Supplier", "Supplier")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("SupplierID");
                });

            modelBuilder.Entity("BadgerData.Models.RequisitionItem", b =>
                {
                    b.HasOne("BadgerData.Models.Requisition", "Requisition")
                        .WithMany("RequisitionItem")
                        .HasForeignKey("RequisitionID");
                });
#pragma warning restore 612, 618
        }
    }
}
